name: Build and Package Game

on:
  schedule:
    - cron: '*/60 * * * *'
  push:
    branches: [main]

jobs:
  build-main:
    runs-on: ubuntu-latest

    env:
      RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    steps:
    - name: Checkout original repository
      uses: actions/checkout@v2
      with:
        repository: pagefaultgames/pokerogue
        ref: main

    - name: Get latest commit hash
      id: latest_commit
      run: |
        latest_commit=$(git log --pretty=format:'%h' -n 1)
        echo "::set-output name=latest_commit::$latest_commit"

    - name: Get current release
      id: get_release
      run: |
        response=$(curl -s -H "Authorization: token $RELEASE_TOKEN" "https://api.github.com/repos/Admiral-Billy/pokerogue/releases?per_page=1&draft=true")
        current_release=$(echo "$response" | jq -r '.[0].name')
        echo "::set-output name=current_release::$current_release"

    - name: Check if latest commit matches current draft release
      id: check_match
      run: |
        latest_commit="${{ steps.latest_commit.outputs.latest_commit }}"
        current_release="${{ steps.get_release.outputs.current_release }}"
        echo "Latest commit: $latest_commit"
        echo "Current release: $current_release"
        if [ "$latest_commit" == "$current_release" ]; then
          echo "::set-output name=stop_build::true"
        else
          echo "::set-output name=stop_build::false"
        fi

    - name: Set up Node.js
      if: steps.check_match.outputs.stop_build != 'true'
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Install dependencies
      if: steps.check_match.outputs.stop_build != 'true'
      run: npm install

    - name: Build game
      if: steps.check_match.outputs.stop_build != 'true'
      run: npm run build -- --mode development

    - name: Package game
      if: steps.check_match.outputs.stop_build != 'true'
      run: |
        cd dist
        echo ${{ steps.latest_commit.outputs.latest_commit }} > currentVersion.txt
        zip -r game.zip .

    - name: Create Release
      if: steps.check_match.outputs.stop_build != 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: release-${{ steps.latest_commit.outputs.latest_commit }}
        release_name: ${{ steps.latest_commit.outputs.latest_commit }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: steps.check_match.outputs.stop_build != 'true'
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/game.zip
        asset_name: game.zip
        asset_content_type: application/zip

    - name: Checkout beta repository
      uses: actions/checkout@v2
      with:
        repository: pagefaultgames/pokerogue
        ref: beta

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm install

    - name: Build game
      run: npm run build -- --mode development

    - name: Package game
      run: |
        cd dist
        zip -r game_beta.zip .

    - name: Gets latest created release info
      id: latest_release_info
      uses: jossef/action-latest-release-info@v1.2.1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    - name: Delete old release assets
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.RELEASE_TOKEN }}
        tag: "release-${{ steps.get_release.outputs.current_release }}"
        assets: game_beta.zip
        fail-if-no-assets: false
        
    - name: Upload Beta Release Asset
      id: upload-release-asset-beta
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
        asset_path: ./dist/game_beta.zip
        asset_name: game_beta.zip
        asset_content_type: application/zip

    - name: Checkout Futabas repository
      uses: actions/checkout@v4
      with:
        repository: skrftb/pokerogue-debug
        ref: main
     
    - name: Package game
      run: |
        cd game
        zip -r game_futaba_mod.zip .

    - name: Delete old release assets
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.RELEASE_TOKEN }}
        tag: "release-${{ steps.get_release.outputs.current_release }}"
        assets: game_futaba_mod.zip
        fail-if-no-assets: false
        
    - name: Upload Futabas Release Asset
      id: upload-release-asset-2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
        asset_path: ./game/game_futaba_mod.zip
        asset_name: game_futaba_mod.zip
        asset_content_type: application/zip

    - name: Checkout Kanto repository
      uses: actions/checkout@v4
      with:
        repository: skrftb/pokerogue-kanto
        ref: main
     
    - name: Package game
      run: |
        cd game
        zip -r kanto_version.zip .
        
    - name: Delete old release assets
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.RELEASE_TOKEN }}
        tag: "release-${{ steps.get_release.outputs.current_release }}"
        assets: kanto_version.zip
        fail-if-no-assets: false
        
    - name: Upload Kanto Release Asset
      id: upload-release-asset-3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
        asset_path: ./game/kanto_version.zip
        asset_name: kanto_version.zip
        asset_content_type: application/zip

    - name: Delete old releases
      if: needs.build-main.outputs.stop_build != 'true'
      uses: dev-drprasad/delete-older-releases@v0.3.3
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
